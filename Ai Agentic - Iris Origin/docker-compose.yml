# Iris Origin AI Agentic Platform - Docker Configuration

version: '3.8'

services:
  # AI/ML Service (Rasa + FastAPI)
  ai-service:
    build: 
      context: .
      dockerfile: docker/Dockerfile.ai
    container_name: iris-origin-ai
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://iris_user:iris_password@postgres:5432/iris_origin
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://mongo:27017/iris_origin
      - ENVIRONMENT=development
      - LOG_LEVEL=info
    volumes:
      - ./src:/app/src
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
      - mongo
    restart: unless-stopped
    networks:
      - iris-network

  # Frontend Service (React TypeScript)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: iris-origin-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - ai-service
    restart: unless-stopped
    networks:
      - iris-network

  # PostgreSQL Database (Primary data store)
  postgres:
    image: postgres:15-alpine
    container_name: iris-origin-postgres
    environment:
      POSTGRES_DB: iris_origin
      POSTGRES_USER: iris_user
      POSTGRES_PASSWORD: iris_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - iris-network

  # MongoDB (Document store for conversations)
  mongo:
    image: mongo:7.0
    container_name: iris-origin-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: iris_admin
      MONGO_INITDB_ROOT_PASSWORD: iris_password
      MONGO_INITDB_DATABASE: iris_origin
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    restart: unless-stopped
    networks:
      - iris-network

  # Redis (Caching and session management)
  redis:
    image: redis:7-alpine
    container_name: iris-origin-redis
    command: redis-server --appendonly yes --requirepass iris_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - iris-network

  # Nginx (Load balancer and reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: iris-origin-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - ai-service
      - frontend
    restart: unless-stopped
    networks:
      - iris-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: iris-origin-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - iris-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: iris-origin-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - iris-network

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
networks:
  iris-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16