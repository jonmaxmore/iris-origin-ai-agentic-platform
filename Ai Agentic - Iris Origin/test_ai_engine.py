"""
Test AI Processing Engine
========================

Enterprise-grade testing for AI processing capabilities.
Tests all core functionality with real-world scenarios.

Author: Iris Origin AI Team
Date: 2025-01-17
Version: 1.0.0 Enterprise
"""

import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

# Import AI service components
from src.ai_service.core.ai_processor import EnterpriseAIProcessor
from src.ai_service.models.message_models import Message, MessageType, Platform
from src.ai_service.utils.language_detector import LanguageDetector

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_language_detection():
    """Test language detection with various inputs"""
    print("\n=== Testing Language Detection ===")
    
    detector = LanguageDetector()
    
    test_cases = [
        ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "th"),
        ("Hello, I would like to inquire about your products", "en"),
        ("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞", "th"),
        ("Can you help me with this issue please?", "en"),
        ("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏°‡∏≤‡∏Å", "th"),
        ("Thank you very much, excellent service!", "en"),
        ("555 ‡∏ï‡∏•‡∏Å‡∏°‡∏≤‡∏Å", "th"),
        ("LOL that's hilarious", "en")
    ]
    
    for text, expected_lang in test_cases:
        try:
            result = await detector.detect_language_with_confidence(text)
            status = "‚úÖ" if result.language == expected_lang else "‚ùå"
            print(f"{status} Text: '{text[:30]}...'")
            print(f"   Detected: {result.language} (confidence: {result.confidence:.2f})")
            print(f"   Method: {result.detection_method}")
            print(f"   Cultural context: {result.cultural_context}")
            print()
        except Exception as e:
            print(f"‚ùå Error testing '{text[:30]}...': {e}")

async def test_ai_processor_initialization():
    """Test AI processor initialization"""
    print("\n=== Testing AI Processor Initialization ===")
    
    try:
        processor = EnterpriseAIProcessor()
        print("‚úÖ AI Processor created successfully")
        
        # Test model initialization (this might take a while)
        print("üîÑ Initializing AI models... (this may take several minutes)")
        await processor.initialize_models()
        print("‚úÖ AI models initialized successfully")
        
        return processor
        
    except Exception as e:
        print(f"‚ùå AI Processor initialization failed: {e}")
        logger.error(f"AI Processor initialization error: {e}")
        return None

async def test_message_processing(processor):
    """Test complete message processing pipeline"""
    if not processor:
        print("\n‚ùå Skipping message processing tests - processor not available")
        return
    
    print("\n=== Testing Message Processing Pipeline ===")
    
    test_messages = [
        {
            "text": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            "user_id": "test_user_thai_1",
            "platform": Platform.FACEBOOK,
            "expected_intent": "product_inquiry",
            "expected_language": "th"
        },
        {
            "text": "Hello, I have a complaint about your service",
            "user_id": "test_user_eng_1", 
            "platform": Platform.INSTAGRAM,
            "expected_intent": "complaint",
            "expected_language": "en"
        },
        {
            "text": "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°",
            "user_id": "test_user_thai_2",
            "platform": Platform.WHATSAPP,
            "expected_intent": "compliment",
            "expected_language": "th"
        },
        {
            "text": "Can you help me with my order status?",
            "user_id": "test_user_eng_2",
            "platform": Platform.WEB,
            "expected_intent": "order_status",
            "expected_language": "en"
        }
    ]
    
    for i, test_case in enumerate(test_messages, 1):
        try:
            print(f"\n--- Test Case {i} ---")
            print(f"Input: '{test_case['text']}'")
            
            # Create message object
            message = Message(
                user_id=test_case['user_id'],
                text=test_case['text'],
                platform=test_case['platform'],
                message_type=MessageType.TEXT
            )
            
            # Process message
            start_time = datetime.now()
            processed_message = await processor.process_message(message)
            processing_time = (datetime.now() - start_time).total_seconds() * 1000
            
            # Check results
            result = processed_message.processing_result
            
            print(f"‚úÖ Processing completed in {processing_time:.2f}ms")
            print(f"   Language: {result.language} (expected: {test_case['expected_language']})")
            print(f"   Intent: {result.intent} (confidence: {result.confidence:.2f})")
            print(f"   Sentiment: {result.sentiment} (score: {result.sentiment_score:.2f})")
            print(f"   Entities: {len(result.entities)} found")
            print(f"   Response: '{result.suggested_response[:50]}...'")
            
            # Validate results
            language_ok = result.language == test_case['expected_language']
            confidence_ok = result.confidence > 0.3
            response_ok = len(result.suggested_response) > 0
            
            print(f"   Language Match: {'‚úÖ' if language_ok else '‚ùå'}")
            print(f"   Confidence OK: {'‚úÖ' if confidence_ok else '‚ùå'}")
            print(f"   Response Generated: {'‚úÖ' if response_ok else '‚ùå'}")
            
        except Exception as e:
            print(f"‚ùå Error processing test case {i}: {e}")
            logger.error(f"Message processing error: {e}")

async def test_performance_metrics(processor):
    """Test performance metrics and monitoring"""
    if not processor:
        print("\n‚ùå Skipping performance tests - processor not available")
        return
        
    print("\n=== Testing Performance Metrics ===")
    
    try:
        metrics = await processor.get_performance_metrics()
        
        print("‚úÖ Performance metrics retrieved successfully")
        print(f"   Total messages processed: {metrics['processing_stats']['total_processed']}")
        print(f"   Average processing time: {metrics['processing_stats']['average_processing_time']:.2f}ms")
        print(f"   Average accuracy: {metrics['processing_stats']['accuracy_score']:.2f}")
        print(f"   Model health: {len(metrics['model_status'])} models checked")
        print(f"   System uptime: {metrics['uptime']:.2f} seconds")
        
    except Exception as e:
        print(f"‚ùå Error getting performance metrics: {e}")

async def main():
    """Main test function"""
    print("üöÄ Starting Iris Origin AI Processing Engine Tests")
    print("=" * 60)
    
    # Test 1: Language Detection
    await test_language_detection()
    
    # Test 2: AI Processor Initialization
    processor = await test_ai_processor_initialization()
    
    # Test 3: Message Processing Pipeline
    await test_message_processing(processor)
    
    # Test 4: Performance Metrics
    await test_performance_metrics(processor)
    
    print("\n" + "=" * 60)
    print("üéâ AI Processing Engine Tests Completed")
    print("Check the results above for any issues that need attention.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Tests interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Critical error during testing: {e}")
        logger.error(f"Critical test error: {e}")
        sys.exit(1)